//
// assets/css/abstracts/mixins.scss

@mixin importFont($fontname, $filename, $isBold: false, $isItalic: false) {
    @font-face {
        font-family: $fontname; // IE9 Compat Modes
        src: url('~static/fonts/#{$filename}.eot'); // IE6-IE8
        src: url('~static/fonts/#{$filename}.eot?#iefix') format('embedded-opentype'), // Modern Browsers
        url('~static/fonts/#{$filename}.woff') format('woff'), // Safari, Android, iOS
        url('~static/fonts/#{$filename}.ttf') format('truetype'); // Legacy iOS
        font-display: property;
        @if $isBold {
            font-weight: $isBold;
        }
        @if $isItalic {
            font-style: italic;
        }
        @else {
            font-style: normal;
        }
    }
}

@mixin transform($transforms) {
    transform: $transforms;
}

@mixin borderRadius($border-radiuss) {
    -moz-border-radius: $border-radiuss;
    -o-border-radius: $border-radiuss;
    -ms-border-radius: $border-radiuss;
    -webkit-border-radius: $border-radiuss;
    border-radius: $border-radiuss;
}

@mixin centerX() {
    left: 50%;
    @include transform(translateX(-50%));
}

@mixin centerY() {
    top: 50%;
    @include transform(translateY(-50%));
}

@mixin centerXY() {
    left: 50%;
    top: 50%;
    @include transform(translate(-50%,
    -50%));
}

@mixin inputBorder() {
    border: 1px solid $light_grey;
}

@mixin maintain-ratio($ratio: 1 1, $width: 100%) {
    @if length($ratio) < 2 or length($ratio) > 2 {
      @warn "$ratio must be a list with two values.";
    }
    //$width: 100%;
    $height: percentage(nth($ratio, 2) / nth($ratio, 1));
    width: $width;
    height: 0;
    padding-bottom: $height;
}


// Image Aspect Ratio
@mixin aspect-ratio($width, $height) {
    position: relative;
    &:before {
        display: block;
        background: $lightGrey;
        content: "";
        width: 100%;
        padding-top: floor(($height / $width) * 100%);
    }
    img, video {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: auto;
    }
}

@mixin enable-touch-callout(){
    -webkit-touch-callout: default;
    -webkit-user-select: default; /* Safari */
    -khtml-user-select: default; /* Konqueror HTML */
        -moz-user-select: default; /* Old versions of Firefox */
        -ms-user-select: default; /* Internet Explorer/Edge */
            user-select: default; /* Non-prefixed version, currently
                            supported by Chrome, Opera and Firefox */
}

@mixin disable-touch-callout(){
    -webkit-touch-callout: none;
    -webkit-user-select: none; /* Safari */
    -khtml-user-select: none; /* Konqueror HTML */
        -moz-user-select: none; /* Old versions of Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                            supported by Chrome, Opera and Firefox */
}

// https://github.com/twbs/bootstrap/blob/master/scss/mixins/_breakpoints.scss

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @if not $n {
        @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
    }
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($lower, $breakpoints);
    $max: breakpoint-max($upper, $breakpoints);

    @if $min != null and $max != null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    } @else if $max == null {
        @include media-breakpoint-up($lower, $breakpoints) {
            @content;
        }
    } @else if $min == null {
        @include media-breakpoint-down($upper, $breakpoints) {
            @content;
        }
    }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    $max: breakpoint-max($name, $breakpoints);

    @if $min != null and $max != null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    } @else if $max == null {
        @include media-breakpoint-up($name, $breakpoints) {
            @content;
        }
    } @else if $min == null {
        @include media-breakpoint-down($name, $breakpoints) {
            @content;
        }
    }
}
